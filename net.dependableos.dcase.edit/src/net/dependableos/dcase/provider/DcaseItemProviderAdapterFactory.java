/*
 * Copyright (C) Yutaka Matsuno 2010-2012 All rights reserved.
 */
// AUTO_GENERATED:START
package net.dependableos.dcase.provider;

import java.util.ArrayList;
import java.util.Collection;


import net.dependableos.dcase.util.DcaseAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DcaseItemProviderAdapterFactory extends DcaseAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DcaseItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Argument} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ArgumentItemProvider argumentItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Argument}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createArgumentAdapter() {
        if (argumentItemProvider == null) {
            argumentItemProvider = new ArgumentItemProvider(this);
        }

        return argumentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Goal} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GoalItemProvider goalItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Goal}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGoalAdapter() {
        if (goalItemProvider == null) {
            goalItemProvider = new GoalItemProvider(this);
        }

        return goalItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.System} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SystemItemProvider systemItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.System}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSystemAdapter() {
        if (systemItemProvider == null) {
            systemItemProvider = new SystemItemProvider(this);
        }

        return systemItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Strategy} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StrategyItemProvider strategyItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Strategy}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStrategyAdapter() {
        if (strategyItemProvider == null) {
            strategyItemProvider = new StrategyItemProvider(this);
        }

        return strategyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Evidence} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EvidenceItemProvider evidenceItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Evidence}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEvidenceAdapter() {
        if (evidenceItemProvider == null) {
            evidenceItemProvider = new EvidenceItemProvider(this);
        }

        return evidenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Monitor} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MonitorItemProvider monitorItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Monitor}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMonitorAdapter() {
        if (monitorItemProvider == null) {
            monitorItemProvider = new MonitorItemProvider(this);
        }

        return monitorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Undeveloped} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UndevelopedItemProvider undevelopedItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Undeveloped}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUndevelopedAdapter() {
        if (undevelopedItemProvider == null) {
            undevelopedItemProvider = new UndevelopedItemProvider(this);
        }

        return undevelopedItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Context} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ContextItemProvider contextItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Context}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createContextAdapter() {
        if (contextItemProvider == null) {
            contextItemProvider = new ContextItemProvider(this);
        }

        return contextItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Justification} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JustificationItemProvider justificationItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Justification}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJustificationAdapter() {
        if (justificationItemProvider == null) {
            justificationItemProvider = new JustificationItemProvider(this);
        }

        return justificationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Policy} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PolicyItemProvider policyItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Policy}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPolicyAdapter() {
        if (policyItemProvider == null) {
            policyItemProvider = new PolicyItemProvider(this);
        }

        return policyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Userdef001} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Userdef001ItemProvider userdef001ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Userdef001}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUserdef001Adapter() {
        if (userdef001ItemProvider == null) {
            userdef001ItemProvider = new Userdef001ItemProvider(this);
        }

        return userdef001ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Userdef002} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Userdef002ItemProvider userdef002ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Userdef002}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUserdef002Adapter() {
        if (userdef002ItemProvider == null) {
            userdef002ItemProvider = new Userdef002ItemProvider(this);
        }

        return userdef002ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Userdef003} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Userdef003ItemProvider userdef003ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Userdef003}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUserdef003Adapter() {
        if (userdef003ItemProvider == null) {
            userdef003ItemProvider = new Userdef003ItemProvider(this);
        }

        return userdef003ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Userdef004} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Userdef004ItemProvider userdef004ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Userdef004}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUserdef004Adapter() {
        if (userdef004ItemProvider == null) {
            userdef004ItemProvider = new Userdef004ItemProvider(this);
        }

        return userdef004ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Userdef005} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Userdef005ItemProvider userdef005ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Userdef005}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUserdef005Adapter() {
        if (userdef005ItemProvider == null) {
            userdef005ItemProvider = new Userdef005ItemProvider(this);
        }

        return userdef005ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.Userdef006} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Userdef006ItemProvider userdef006ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.Userdef006}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUserdef006Adapter() {
        if (userdef006ItemProvider == null) {
            userdef006ItemProvider = new Userdef006ItemProvider(this);
        }

        return userdef006ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.DcaseLink001} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DcaseLink001ItemProvider dcaseLink001ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.DcaseLink001}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDcaseLink001Adapter() {
        if (dcaseLink001ItemProvider == null) {
            dcaseLink001ItemProvider = new DcaseLink001ItemProvider(this);
        }

        return dcaseLink001ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.DcaseLink002} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DcaseLink002ItemProvider dcaseLink002ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.DcaseLink002}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDcaseLink002Adapter() {
        if (dcaseLink002ItemProvider == null) {
            dcaseLink002ItemProvider = new DcaseLink002ItemProvider(this);
        }

        return dcaseLink002ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.DcaseLink003} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DcaseLink003ItemProvider dcaseLink003ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.DcaseLink003}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDcaseLink003Adapter() {
        if (dcaseLink003ItemProvider == null) {
            dcaseLink003ItemProvider = new DcaseLink003ItemProvider(this);
        }

        return dcaseLink003ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.dependableos.dcase.DcaseLink004} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DcaseLink004ItemProvider dcaseLink004ItemProvider;

    /**
     * This creates an adapter for a {@link net.dependableos.dcase.DcaseLink004}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDcaseLink004Adapter() {
        if (dcaseLink004ItemProvider == null) {
            dcaseLink004ItemProvider = new DcaseLink004ItemProvider(this);
        }

        return dcaseLink004ItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (argumentItemProvider != null) argumentItemProvider.dispose();
        if (goalItemProvider != null) goalItemProvider.dispose();
        if (systemItemProvider != null) systemItemProvider.dispose();
        if (strategyItemProvider != null) strategyItemProvider.dispose();
        if (evidenceItemProvider != null) evidenceItemProvider.dispose();
        if (monitorItemProvider != null) monitorItemProvider.dispose();
        if (undevelopedItemProvider != null) undevelopedItemProvider.dispose();
        if (contextItemProvider != null) contextItemProvider.dispose();
        if (justificationItemProvider != null) justificationItemProvider.dispose();
        if (policyItemProvider != null) policyItemProvider.dispose();
        if (userdef001ItemProvider != null) userdef001ItemProvider.dispose();
        if (userdef002ItemProvider != null) userdef002ItemProvider.dispose();
        if (userdef003ItemProvider != null) userdef003ItemProvider.dispose();
        if (userdef004ItemProvider != null) userdef004ItemProvider.dispose();
        if (userdef005ItemProvider != null) userdef005ItemProvider.dispose();
        if (userdef006ItemProvider != null) userdef006ItemProvider.dispose();
        if (dcaseLink001ItemProvider != null) dcaseLink001ItemProvider.dispose();
        if (dcaseLink002ItemProvider != null) dcaseLink002ItemProvider.dispose();
        if (dcaseLink003ItemProvider != null) dcaseLink003ItemProvider.dispose();
        if (dcaseLink004ItemProvider != null) dcaseLink004ItemProvider.dispose();
    }

}
