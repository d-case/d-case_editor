/*
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«DEFINE NavigatorItem FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «packageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «navigatorItemClassName» extends «getAbstractNavigatorItemQualifiedClassName()» {

	«EXPAND registerAdapterFactory-»
	
	«EXPAND attributes-»
	
	«EXPAND _constructor-»
	
	«EXPAND getView-»
	
	«EXPAND isLeaf-»

	«EXPAND equals-»
	
	«EXPAND hashCode-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE registerAdapterFactory FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
static {
	final Class[] supportedTypes = new Class[] { org.eclipse.gmf.runtime.notation.View.class, org.eclipse.emf.ecore.EObject.class };
	org.eclipse.core.runtime.Platform.getAdapterManager().registerAdapters(new org.eclipse.core.runtime.IAdapterFactory() {
		
		public Object getAdapter(Object adaptableObject, Class adapterType) {
			if (adaptableObject instanceof «getNavigatorItemQualifiedClassName()» && (adapterType == org.eclipse.gmf.runtime.notation.View.class || adapterType == org.eclipse.emf.ecore.EObject.class)) {
				return ((«getNavigatorItemQualifiedClassName()») adaptableObject).getView();
			}
			return null;
		}

		public Class[] getAdapterList() {
			return supportedTypes;
		}
	}, «getNavigatorItemQualifiedClassName()».class);
}
«ENDDEFINE»

«DEFINE  attributes FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.View myView;
	
	«EXPAND xpt::Common::generatedMemberComment»
private boolean myLeaf = false;	
«ENDDEFINE»
	
«DEFINE  _constructor FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public «navigatorItemClassName»(org.eclipse.gmf.runtime.notation.View view, Object parent, boolean isLeaf) {
	super(parent);
	myView = view;
	myLeaf = isLeaf;
}
«ENDDEFINE»
	
«DEFINE  getView FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gmf.runtime.notation.View getView() {
	return myView;
}
«ENDDEFINE»
	
«DEFINE  isLeaf FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isLeaf() {
	return myLeaf;
}
«ENDDEFINE»

«DEFINE  equals FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean equals(Object obj) {
	if (obj instanceof «getNavigatorItemQualifiedClassName()») {
		return org.eclipse.emf.ecore.util.EcoreUtil.getURI(getView()).equals(org.eclipse.emf.ecore.util.EcoreUtil.getURI(((«getNavigatorItemQualifiedClassName()») obj).getView()));
	}
	return super.equals(obj);
}
«ENDDEFINE»
	
«DEFINE  hashCode FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public int hashCode() {
	return org.eclipse.emf.ecore.util.EcoreUtil.getURI(getView()).hashCode();
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenNavigator-»
«ENDDEFINE»