/*
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«DEFINE UpdateCommand FOR gmfgen::GenDiagramUpdater-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «updateCommandClassName» implements org.eclipse.core.commands.IHandler {

	«EXPAND addHandlerListener-»

	«EXPAND dispose-»

	«EXPAND execute-»

	«EXPAND isEnabled-»

	«EXPAND isHandled-»

	«EXPAND removeHandlerListener-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE addHandlerListener FOR gmfgen::GenDiagramUpdater-»
	«EXPAND xpt::Common::generatedMemberComment»
public void addHandlerListener(org.eclipse.core.commands.IHandlerListener handlerListener) {
}
«ENDDEFINE»
	
«DEFINE dispose FOR gmfgen::GenDiagramUpdater-»
	«EXPAND xpt::Common::generatedMemberComment»
public void dispose() {
}
«ENDDEFINE»

«DEFINE execute FOR gmfgen::GenDiagramUpdater-»
	«EXPAND xpt::Common::generatedMemberComment»
public Object execute(org.eclipse.core.commands.ExecutionEvent event) throws org.eclipse.core.commands.ExecutionException {
	org.eclipse.jface.viewers.ISelection selection = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().getSelection();
	if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection) {
		org.eclipse.jface.viewers.IStructuredSelection structuredSelection = (org.eclipse.jface.viewers.IStructuredSelection) selection;
		if (structuredSelection.size() != 1) {
			return null;
		}
		if (structuredSelection.getFirstElement() instanceof org.eclipse.gef.EditPart && ((org.eclipse.gef.EditPart) structuredSelection.getFirstElement()).getModel() instanceof org.eclipse.gmf.runtime.notation.View) {
			org.eclipse.emf.ecore.EObject modelElement = ((org.eclipse.gmf.runtime.notation.View) ((org.eclipse.gef.EditPart) structuredSelection.getFirstElement()).getModel()).getElement();
			java.util.List editPolicies = org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy.getRegisteredEditPolicies(modelElement);
			for (java.util.Iterator it = editPolicies.iterator(); it.hasNext();) {
				org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy nextEditPolicy = (org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy) it.next();
				nextEditPolicy.refresh();
			}

		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE isEnabled FOR gmfgen::GenDiagramUpdater-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isEnabled() {
	return true;
}
«ENDDEFINE»
	
«DEFINE isHandled FOR gmfgen::GenDiagramUpdater-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean isHandled() {
	return true;
}
«ENDDEFINE»

«DEFINE removeHandlerListener FOR gmfgen::GenDiagramUpdater-»
	«EXPAND xpt::Common::generatedMemberComment»
public void removeHandlerListener(org.eclipse.core.commands.IHandlerListener handlerListener) {
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagramUpdater»«ENDDEFINE»